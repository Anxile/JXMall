{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.error.cause.js\";\n// 利用axios进行二次封装\nimport axios from 'axios'; //引入进度条\n\nimport nprogress from 'nprogress'; // 引入进度条样式\n\nimport 'nprogress/nprogress.css'; //在当前模块中引入store\n\nimport store from '@/store'; // 利用axios的creat方法创建一个axios实例，requests就是axios只不过要配置一下\n\nvar requests = axios.create({\n  baseURL: '/api',\n  //基础路径\n  timeout: 5000\n}); //请求拦截器：在发请求之前，请求拦截器可以检测到，可以在请求发出去之前做一些事情\n\nrequests.interceptors.request.use(function (config) {\n  //config：配置对象，对象里面有一个属性很重要，headers请求头\n  if (store.state.detail.uuid_token) {\n    //请求头添加一个字段(userTempId):需要后台做适配\n    config.headers.userTempId = store.state.detail.uuid_token;\n  } //需要携带token带给服务器\n\n\n  if (store.state.user.token) {\n    config.headers.token = store.state.user.token;\n  } // 进度条开始\n\n\n  nprogress.start();\n  return config;\n}); //响应拦截器\n\nrequests.interceptors.response.use(function (res) {\n  nprogress.done();\n  return res.data; //成功的回调函数：服务器相应数据回来以后，响应拦截器可以检测到，可以做一些事情\n}, function (error) {\n  return Promise.reject(new Error('axios请求失败')); //响应失败的回调函数 终止promise链\n});\nexport default requests;","map":{"version":3,"sources":["D:/JXMall/src/api/request.js"],"names":["axios","nprogress","store","requests","create","baseURL","timeout","interceptors","request","use","config","state","detail","uuid_token","headers","userTempId","user","token","start","response","res","done","data","error","Promise","reject","Error"],"mappings":";;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAOC,SAAP,MAAsB,WAAtB,C,CACA;;AACA,OAAO,yBAAP,C,CACA;;AACA,OAAOC,KAAP,MAAkB,SAAlB,C,CACA;;AACA,IAAMC,QAAQ,GAAGH,KAAK,CAACI,MAAN,CAAa;AAC1BC,EAAAA,OAAO,EAAE,MADiB;AACT;AACjBC,EAAAA,OAAO,EAAE;AAFiB,CAAb,CAAjB,C,CAKA;;AACAH,QAAQ,CAACI,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CAAkC,UAACC,MAAD,EAAY;AAC1C;AACA,MAAIR,KAAK,CAACS,KAAN,CAAYC,MAAZ,CAAmBC,UAAvB,EAAmC;AAC/B;AACAH,IAAAA,MAAM,CAACI,OAAP,CAAeC,UAAf,GAA4Bb,KAAK,CAACS,KAAN,CAAYC,MAAZ,CAAmBC,UAA/C;AACH,GALyC,CAM1C;;;AACA,MAAIX,KAAK,CAACS,KAAN,CAAYK,IAAZ,CAAiBC,KAArB,EAA4B;AACxBP,IAAAA,MAAM,CAACI,OAAP,CAAeG,KAAf,GAAuBf,KAAK,CAACS,KAAN,CAAYK,IAAZ,CAAiBC,KAAxC;AACH,GATyC,CAU1C;;;AACAhB,EAAAA,SAAS,CAACiB,KAAV;AACA,SAAOR,MAAP;AACH,CAbD,E,CAeA;;AACAP,QAAQ,CAACI,YAAT,CAAsBY,QAAtB,CAA+BV,GAA/B,CACI,UAACW,GAAD,EAAS;AACLnB,EAAAA,SAAS,CAACoB,IAAV;AACA,SAAOD,GAAG,CAACE,IAAX,CAFK,CAEY;AACpB,CAJL,EAKI,UAACC,KAAD,EAAW;AACP,SAAOC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,WAAV,CAAf,CAAP,CADO,CACwC;AAClD,CAPL;AASA,eAAevB,QAAf","sourcesContent":["// 利用axios进行二次封装\r\nimport axios from 'axios';\r\n//引入进度条\r\nimport nprogress from 'nprogress';\r\n// 引入进度条样式\r\nimport 'nprogress/nprogress.css';\r\n//在当前模块中引入store\r\nimport store from '@/store';\r\n// 利用axios的creat方法创建一个axios实例，requests就是axios只不过要配置一下\r\nconst requests = axios.create({\r\n    baseURL: '/api', //基础路径\r\n    timeout: 5000, \r\n});\r\n\r\n//请求拦截器：在发请求之前，请求拦截器可以检测到，可以在请求发出去之前做一些事情\r\nrequests.interceptors.request.use((config) => {\r\n    //config：配置对象，对象里面有一个属性很重要，headers请求头\r\n    if (store.state.detail.uuid_token) {\r\n        //请求头添加一个字段(userTempId):需要后台做适配\r\n        config.headers.userTempId = store.state.detail.uuid_token;\r\n    }\r\n    //需要携带token带给服务器\r\n    if (store.state.user.token) {\r\n        config.headers.token = store.state.user.token;\r\n    }\r\n    // 进度条开始\r\n    nprogress.start();\r\n    return config;\r\n});\r\n\r\n//响应拦截器\r\nrequests.interceptors.response.use(\r\n    (res) => {\r\n        nprogress.done();\r\n        return res.data; //成功的回调函数：服务器相应数据回来以后，响应拦截器可以检测到，可以做一些事情\r\n    },\r\n    (error) => {\r\n        return Promise.reject(new Error('axios请求失败')); //响应失败的回调函数 终止promise链\r\n    }\r\n);\r\nexport default requests;"]},"metadata":{},"sourceType":"module"}