{"ast":null,"code":"import _asyncToGenerator from \"D:/JXMall/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"regenerator-runtime/runtime.js\";\n// detail模块的小仓库\nimport { reqGoodsInfo, reqAddOrUpdateShopCart } from \"@/api\"; //引入api里面的axios\n// 封装游客身份模块uuid--->生成一个随机字符串（不能在变了）\n\nimport { getUUID } from \"@/utils/uuid_token\";\nvar actions = {\n  getGoodInfo: function getGoodInfo(_ref, skuId) {\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      var commit, result;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref.commit;\n              _context.next = 3;\n              return reqGoodsInfo(skuId);\n\n            case 3:\n              result = _context.sent;\n\n              if (result.code == 200) {\n                commit(\"GETGOODINFO\", result.data);\n                console.log(result.data);\n              }\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  addOrUpdateShopCart: function addOrUpdateShopCart(_ref2, _ref3) {\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n      var commit, skuId, skuNum, result;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              commit = _ref2.commit;\n              skuId = _ref3.skuId, skuNum = _ref3.skuNum;\n              _context2.next = 4;\n              return reqAddOrUpdateShopCart(skuId, skuNum);\n\n            case 4:\n              result = _context2.sent;\n\n              if (!(result.code == 200)) {\n                _context2.next = 10;\n                break;\n              }\n\n              console.log('购物车更新成功');\n              return _context2.abrupt(\"return\", \"ok\");\n\n            case 10:\n              return _context2.abrupt(\"return\", Promise.reject(new Error(\"faile\")));\n\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  }\n};\nvar mutations = {\n  GETGOODINFO: function GETGOODINFO(state, goodInfo) {\n    state.goodInfo = goodInfo;\n  }\n};\nvar state = {\n  goodInfo: {},\n  //游客临时身份\n  uuid_token: getUUID()\n};\nvar getters = {\n  categoryView: function categoryView(state) {\n    //比如：state.goodInfo初始状态空对象，空对象的categoryview属性值undefined\n    //当前计算出的categoryview属性值至少是一个空对象，假的报错不会有了。|\n    return state.goodInfo.categoryView || {};\n  },\n  skuInfo: function skuInfo(state) {\n    return state.goodInfo.skuInfo || {};\n  },\n  spuSaleAttrList: function spuSaleAttrList(state) {\n    return state.goodInfo.spuSaleAttrList || [];\n  }\n};\nexport default {\n  state: state,\n  mutations: mutations,\n  actions: actions,\n  getters: getters\n};","map":{"version":3,"sources":["D:/JXMall/src/store/detali.js"],"names":["reqGoodsInfo","reqAddOrUpdateShopCart","getUUID","actions","getGoodInfo","skuId","commit","result","code","data","console","log","addOrUpdateShopCart","skuNum","Promise","reject","Error","mutations","GETGOODINFO","state","goodInfo","uuid_token","getters","categoryView","skuInfo","spuSaleAttrList"],"mappings":";;;;AAAA;AACA,SAASA,YAAT,EAAuBC,sBAAvB,QAAqD,OAArD,C,CAA8D;AAC9D;;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,IAAMC,OAAO,GAAG;AACNC,EAAAA,WADM,6BACkBC,KADlB,EACyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAjBC,cAAAA,MAAiB,QAAjBA,MAAiB;AAAA;AAAA,qBACdN,YAAY,CAACK,KAAD,CADE;;AAAA;AAC7BE,cAAAA,MAD6B;;AAEjC,kBAAIA,MAAM,CAACC,IAAP,IAAe,GAAnB,EAAwB;AACpBF,gBAAAA,MAAM,CAAC,aAAD,EAAgBC,MAAM,CAACE,IAAvB,CAAN;AACAC,gBAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAM,CAACE,IAAnB;AACH;;AALgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMpC,GAPW;AAQNG,EAAAA,mBARM,6CAQ4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA5BN,cAAAA,MAA4B,SAA5BA,MAA4B;AAAjBD,cAAAA,KAAiB,SAAjBA,KAAiB,EAAVQ,MAAU,SAAVA,MAAU;AAAA;AAAA,qBACjCZ,sBAAsB,CAACI,KAAD,EAAQQ,MAAR,CADW;;AAAA;AAChDN,cAAAA,MADgD;;AAAA,oBAEhDA,MAAM,CAACC,IAAP,IAAe,GAFiC;AAAA;AAAA;AAAA;;AAGhDE,cAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AAHgD,gDAIzC,IAJyC;;AAAA;AAAA,gDAMzCG,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,OAAV,CAAf,CANyC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQvD;AAhBW,CAAhB;AAkBA,IAAMC,SAAS,GAAG;AACdC,EAAAA,WADc,uBACFC,KADE,EACKC,QADL,EACe;AACzBD,IAAAA,KAAK,CAACC,QAAN,GAAiBA,QAAjB;AACH;AAHa,CAAlB;AAKA,IAAMD,KAAK,GAAG;AACVC,EAAAA,QAAQ,EAAE,EADA;AAEV;AACAC,EAAAA,UAAU,EAAEnB,OAAO;AAHT,CAAd;AAKA,IAAMoB,OAAO,GAAG;AACZC,EAAAA,YADY,wBACCJ,KADD,EACQ;AAChB;AACA;AACA,WAAOA,KAAK,CAACC,QAAN,CAAeG,YAAf,IAA+B,EAAtC;AACH,GALW;AAMZC,EAAAA,OANY,mBAMJL,KANI,EAMG;AACX,WAAOA,KAAK,CAACC,QAAN,CAAeI,OAAf,IAA0B,EAAjC;AACH,GARW;AASZC,EAAAA,eATY,2BASIN,KATJ,EASW;AACnB,WAAOA,KAAK,CAACC,QAAN,CAAeK,eAAf,IAAkC,EAAzC;AACH;AAXW,CAAhB;AAaA,eAAe;AACXN,EAAAA,KAAK,EAALA,KADW;AAEXF,EAAAA,SAAS,EAATA,SAFW;AAGXd,EAAAA,OAAO,EAAPA,OAHW;AAIXmB,EAAAA,OAAO,EAAPA;AAJW,CAAf","sourcesContent":["// detail模块的小仓库\r\nimport { reqGoodsInfo, reqAddOrUpdateShopCart } from \"@/api\"; //引入api里面的axios\r\n// 封装游客身份模块uuid--->生成一个随机字符串（不能在变了）\r\nimport { getUUID } from \"@/utils/uuid_token\";\r\nconst actions = {\r\n    async getGoodInfo({ commit }, skuId) {\r\n        let result = await reqGoodsInfo(skuId);\r\n        if (result.code == 200) {\r\n            commit(\"GETGOODINFO\", result.data);\r\n            console.log(result.data)\r\n        }\r\n    },\r\n    async addOrUpdateShopCart({ commit },{ skuId, skuNum }) {\r\n        let result = await reqAddOrUpdateShopCart(skuId, skuNum);\r\n        if (result.code == 200) {\r\n            console.log('购物车更新成功')\r\n            return \"ok\";\r\n        } else {\r\n            return Promise.reject(new Error(\"faile\"));\r\n        }\r\n    },\r\n};\r\nconst mutations = {\r\n    GETGOODINFO(state, goodInfo) {\r\n        state.goodInfo = goodInfo;\r\n    },\r\n};\r\nconst state = {\r\n    goodInfo: {},\r\n    //游客临时身份\r\n    uuid_token: getUUID(),\r\n};\r\nconst getters = {\r\n    categoryView(state) {\r\n        //比如：state.goodInfo初始状态空对象，空对象的categoryview属性值undefined\r\n        //当前计算出的categoryview属性值至少是一个空对象，假的报错不会有了。|\r\n        return state.goodInfo.categoryView || {};\r\n    },\r\n    skuInfo(state) {\r\n        return state.goodInfo.skuInfo || {};\r\n    },\r\n    spuSaleAttrList(state) {\r\n        return state.goodInfo.spuSaleAttrList || [];\r\n    },\r\n};\r\nexport default {\r\n    state,\r\n    mutations,\r\n    actions,\r\n    getters,\r\n};"]},"metadata":{},"sourceType":"module"}