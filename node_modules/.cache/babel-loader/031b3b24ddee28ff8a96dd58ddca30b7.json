{"ast":null,"code":"import _asyncToGenerator from \"D:/\\u7B54\\u8FA9\\u9879\\u76EE/shangpinhuishop/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport { reqGetSearchInfo } from \"@/api\"; //每个actions里的函数都需要接收一个包含commit方法的参数对象，才能够调用mutations里的函数来修改仓库的状态。\n//commit方法是用来触发mutations中的函数的，它的第一个参数是需要调用的mutations函数的名称，第二个参数是该函数需要的参数.\n//通过调用commit方法，我们可以修改仓库的状态。\n\nvar actions = {\n  //专门处理异步函数\n  //context是vuex自动生成的对象\n  getSearchList: function getSearchList(context) {\n    var _arguments = arguments;\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      var params, result;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              params = _arguments.length > 1 && _arguments[1] !== undefined ? _arguments[1] : {};\n              _context.next = 3;\n              return reqGetSearchInfo(params);\n\n            case 3:\n              result = _context.sent;\n\n              //reqGetSearchInfo返回一个Promise对象\n              if (result.code = 200) {\n                context.commit('GETSEARCHLIST', result.data);\n              }\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  }\n}; //在 Vuex 中，所有的状态修改都要通过提交 mutation 来实现，而不是直接修改 store 中的状态，这样做的好处是可以更好地跟踪状态的变化，方便调试和开发。\n//而 action 则是为了解决  *异步操作*  的需求而生的，它可以包装 mutation，并且可以包含异步操作的逻辑。\n//因此，我们通常会在 action 中执行异步操作，然后通过 commit 提交 mutation 来更新状态。\n\nvar mutations = {\n  //只能处理同步函数\n  GETSEARCHLIST: function GETSEARCHLIST(state, searchList) {\n    state.searchList = searchList;\n  }\n}; // search模块的小仓库\n\nvar state = {\n  // 仓库初始状态\n  searchList: {}\n}; //计算属性\n//项目当中getters主要的作用是：简化仓库中的数据（简化数据而生）\n//可以把我们将来在组件当中需要用的数据简化一下【将来组件在获取数据的时候就方便了】\n\nvar getters = {\n  //当前形参state，当前仓库中的state，并非大仓库中的那个state\n  goodsList: function goodsList(state) {\n    return state.searchList.goodsList || [];\n  },\n  attrsList: function attrsList(state) {\n    return state.searchList.attrsList || [];\n  },\n  trademarkList: function trademarkList(state) {\n    return state.searchList.trademarkList || [];\n  }\n};\nexport default {\n  state: state,\n  mutations: mutations,\n  actions: actions,\n  getters: getters\n};","map":{"version":3,"sources":["D:/答辩项目/shangpinhuishop/src/store/Search.js"],"names":["reqGetSearchInfo","actions","getSearchList","context","params","result","code","commit","data","mutations","GETSEARCHLIST","state","searchList","getters","goodsList","attrsList","trademarkList"],"mappings":";;AAAA,SAASA,gBAAT,QAAiC,OAAjC,C,CAEA;AACA;AACA;;AACA,IAAMC,OAAO,GAAG;AAAQ;AACA;AACdC,EAAAA,aAFM,yBAEQC,OAFR,EAE8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAbC,cAAAA,MAAa,0EAAJ,EAAI;AAAA;AAAA,qBAEnBJ,gBAAgB,CAACI,MAAD,CAFG;;AAAA;AAElCC,cAAAA,MAFkC;;AAEU;AAChD,kBAAIA,MAAM,CAACC,IAAP,GAAc,GAAlB,EAAuB;AACnBH,gBAAAA,OAAO,CAACI,MAAR,CAAe,eAAf,EAAgCF,MAAM,CAACG,IAAvC;AACH;;AALqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMzC;AARW,CAAhB,C,CAWA;AACA;AACA;;AACA,IAAMC,SAAS,GAAG;AAAU;AACxBC,EAAAA,aADc,yBACAC,KADA,EACOC,UADP,EACmB;AAC7BD,IAAAA,KAAK,CAACC,UAAN,GAAmBA,UAAnB;AACH;AAHa,CAAlB,C,CAQA;;AACA,IAAMD,KAAK,GAAG;AACV;AACAC,EAAAA,UAAU,EAAE;AAFF,CAAd,C,CAMA;AACA;AACA;;AACA,IAAMC,OAAO,GAAG;AACZ;AACAC,EAAAA,SAFY,qBAEFH,KAFE,EAEK;AACb,WAAOA,KAAK,CAACC,UAAN,CAAiBE,SAAjB,IAA8B,EAArC;AACH,GAJW;AAKZC,EAAAA,SALY,qBAKFJ,KALE,EAKK;AACb,WAAOA,KAAK,CAACC,UAAN,CAAiBG,SAAjB,IAA8B,EAArC;AACH,GAPW;AAQZC,EAAAA,aARY,yBAQEL,KARF,EAQS;AACjB,WAAOA,KAAK,CAACC,UAAN,CAAiBI,aAAjB,IAAkC,EAAzC;AACH;AAVW,CAAhB;AAaA,eAAe;AACXL,EAAAA,KAAK,EAALA,KADW;AAEXF,EAAAA,SAAS,EAATA,SAFW;AAGXR,EAAAA,OAAO,EAAPA,OAHW;AAIXY,EAAAA,OAAO,EAAPA;AAJW,CAAf","sourcesContent":["import { reqGetSearchInfo } from \"@/api\"\r\n\r\n//每个actions里的函数都需要接收一个包含commit方法的参数对象，才能够调用mutations里的函数来修改仓库的状态。\r\n//commit方法是用来触发mutations中的函数的，它的第一个参数是需要调用的mutations函数的名称，第二个参数是该函数需要的参数.\r\n//通过调用commit方法，我们可以修改仓库的状态。\r\nconst actions = {       //专门处理异步函数\r\n                        //context是vuex自动生成的对象\r\n    async getSearchList(context, params = {}) {//getSearchList({ commit }, params = {})，把使用dispatch时vuex生成的context对象中的commit函数解构出来\r\n                                //params为默认参数\r\n        let result = await reqGetSearchInfo(params)     //reqGetSearchInfo返回一个Promise对象\r\n        if (result.code = 200) {\r\n            context.commit('GETSEARCHLIST', result.data)\r\n        }\r\n    }\r\n}\r\n\r\n//在 Vuex 中，所有的状态修改都要通过提交 mutation 来实现，而不是直接修改 store 中的状态，这样做的好处是可以更好地跟踪状态的变化，方便调试和开发。\r\n//而 action 则是为了解决  *异步操作*  的需求而生的，它可以包装 mutation，并且可以包含异步操作的逻辑。\r\n//因此，我们通常会在 action 中执行异步操作，然后通过 commit 提交 mutation 来更新状态。\r\nconst mutations = {         //只能处理同步函数\r\n    GETSEARCHLIST(state, searchList) {\r\n        state.searchList = searchList\r\n    }\r\n}\r\n\r\n\r\n\r\n// search模块的小仓库\r\nconst state = {\r\n    // 仓库初始状态\r\n    searchList: {}\r\n}\r\n\r\n\r\n//计算属性\r\n//项目当中getters主要的作用是：简化仓库中的数据（简化数据而生）\r\n//可以把我们将来在组件当中需要用的数据简化一下【将来组件在获取数据的时候就方便了】\r\nconst getters = {\r\n    //当前形参state，当前仓库中的state，并非大仓库中的那个state\r\n    goodsList(state) {\r\n        return state.searchList.goodsList || []\r\n    },\r\n    attrsList(state) {\r\n        return state.searchList.attrsList || []\r\n    },\r\n    trademarkList(state) {\r\n        return state.searchList.trademarkList || []\r\n    }\r\n}\r\n\r\nexport default {\r\n    state,\r\n    mutations,\r\n    actions,\r\n    getters\r\n}"]},"metadata":{},"sourceType":"module"}